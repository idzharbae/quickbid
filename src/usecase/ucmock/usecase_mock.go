// Code generated by MockGen. DO NOT EDIT.
// Source: usecase.go

// Package ucmock is a generated GoMock package.
package ucmock

import (
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockEntityUC is a mock of EntityUC interface
type MockEntityUC struct {
	ctrl     *gomock.Controller
	recorder *MockEntityUCMockRecorder
}

// MockEntityUCMockRecorder is the mock recorder for MockEntityUC
type MockEntityUCMockRecorder struct {
	mock *MockEntityUC
}

// NewMockEntityUC creates a new mock instance
func NewMockEntityUC(ctrl *gomock.Controller) *MockEntityUC {
	mock := &MockEntityUC{ctrl: ctrl}
	mock.recorder = &MockEntityUCMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockEntityUC) EXPECT() *MockEntityUCMockRecorder {
	return m.recorder
}

// Attend mocks base method
func (m *MockEntityUC) Attend(userID int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Attend", userID)
	ret0, _ := ret[0].(error)
	return ret0
}

// Attend indicates an expected call of Attend
func (mr *MockEntityUCMockRecorder) Attend(userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Attend", reflect.TypeOf((*MockEntityUC)(nil).Attend), userID)
}
