// Code generated by MockGen. DO NOT EDIT.
// Source: pgxinterface.go

// Package pgxmock is a generated GoMock package.
package pgxmock

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	pgconn "github.com/jackc/pgconn"
	pgx "github.com/jackc/pgx/v4"
	reflect "reflect"
)

// MockPgx is a mock of Pgx interface
type MockPgx struct {
	ctrl     *gomock.Controller
	recorder *MockPgxMockRecorder
}

// MockPgxMockRecorder is the mock recorder for MockPgx
type MockPgxMockRecorder struct {
	mock *MockPgx
}

// NewMockPgx creates a new mock instance
func NewMockPgx(ctrl *gomock.Controller) *MockPgx {
	mock := &MockPgx{ctrl: ctrl}
	mock.recorder = &MockPgxMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockPgx) EXPECT() *MockPgxMockRecorder {
	return m.recorder
}

// QueryRow mocks base method
func (m *MockPgx) QueryRow(ctx context.Context, query string, args ...interface{}) (pgx.Row, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, query}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "QueryRow", varargs...)
	ret0, _ := ret[0].(pgx.Row)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryRow indicates an expected call of QueryRow
func (mr *MockPgxMockRecorder) QueryRow(ctx, query interface{}, args ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, query}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryRow", reflect.TypeOf((*MockPgx)(nil).QueryRow), varargs...)
}

// Exec mocks base method
func (m *MockPgx) Exec(ctx context.Context, query string, args ...interface{}) (pgconn.CommandTag, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, query}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Exec", varargs...)
	ret0, _ := ret[0].(pgconn.CommandTag)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Exec indicates an expected call of Exec
func (mr *MockPgxMockRecorder) Exec(ctx, query interface{}, args ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, query}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Exec", reflect.TypeOf((*MockPgx)(nil).Exec), varargs...)
}
